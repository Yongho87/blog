---
layout: single
author: Yongho
title:  "컴퓨터 공학 및 프로그래밍 지식 #1"
date:   2021-03-12 06:20:00 +0000
---

> 출처: Computer Systems - A Programmer's Perspective 2nd edition by Bryant & O'Hallaron

## Data alignment
프로세서가 메모리에서 값을 가져올 때 특정 배수단위로 주소를 기반으로 가져 오기 때문에 성능 최적화를 위해서는 메모리에 저장되는 각 타입(`short`, `int`, `double`)의 주소도 메모리상에 배수형태(2, 4, 8)로 저장되어야 함.

이를 위해 `struct type`과 같은 경우 내부에 혹은 마지막에 추가적인 바이트를 넣어서 `struct` 내부의 값 혹은 `element`를 `struct`로 갖는 `array`의 포인터가 4의 배수를 갖도록 컴파일 단계에서 특정 로직을 수행함. 

예) int, char, int를 갖는 struct *xp의 경우 9바이트의 크기를 갖게 될 경우 내부의 2번째 int는 xp+5로 할당됨. 이 경우 data alignment를 위해 char뒤에 3바이트를 추가하여 총 12바이트의 struct를 만들고 2번째 int를 xp+8로 불러올 수 있도록 컴파일링이 수행됨. (struct 포인터인 xp도 4의 배수로 할당됨)

## 포인터에 대한 이해
- 모든 포인터는 연관된 타입이 존재한다: 포인터가 가리키는 값의 타입 (정수, 문자열 등)
- 모든 포인터는 값이 존재한다: 포인터의 값 = 메모리상의 주소
- 포인터는 & 연산자에 의해 만들어진다: 정수 값으로 정의된 `x` (`int x`)에 대하여 `&x`는 해당 값을 저장하고 있는 메모리 상의 주소(=포인터)가 된다.
- 포인터는 * 연산자에 의해 역으로 가리켜진다 (dereference). 
- 배열과 포인터는 밀접하게 관련되어 있다: 배열의 이름이 포인터 처럼 사용될 수 있음. 
- 특정타입의 포인터를 다른 타입으로 변경하면(=캐스팅) 타입만 바뀔뿐 값은 동일하게 유지된다.
- 포인터는 함수도 가리킬 수 있다. (함수의 첫번째 instruction 메모리 주소를 가리킴)
